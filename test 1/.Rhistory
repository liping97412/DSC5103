load("JamesHarden2014.RData")  # load the data (make sure the .RData file is in your working directory!)
dim(data)  # show data dimensions
summary(data)  # summary
View(data)
BHC_data=read.csv("DiD_data.csv")
View(BHC_data)
?mutate_all
library(dplyr)
?mutate_all
library(dplyr)
library(plm)
BHC_data=read.csv("DiD_data.csv")
roll_sd <- function(x, width, weights = rep(1, width), center = TRUE,
min_obs = width, complete_obs = FALSE, na_restore = FALSE,
online = TRUE) {
return(.Call(`_roll_roll_sd`,
x,
as.integer(width),
as.numeric(weights),
as.logical(center),
as.integer(min_obs),
as.logical(complete_obs),
as.logical(na_restore),
as.logical(online)
))
}
BHC_data$ROA_sd <- mutate_all(BHC_data$dep_roa1,7)
ROA <- BHC_data$dep_roa1
BHC_data$ROA_sd <- mutate_all(ROA,7)
BHC_data$ROA_sd <- as.data.frame(lapply(BHC_data$dep_roa1,roll_sd))
BHC_data$ROA_sd <- roll_sd(BHC_data$dep_roa1,7)
library(dplyr)
library(plm)
BHC_data=read.csv("DiD_data.csv")
roll_sd <- function(x, width, weights = rep(1, width), center = TRUE,
min_obs = width, complete_obs = FALSE, na_restore = FALSE,
online = TRUE) {
return(.Call('_roll_roll_sd',
x,
as.integer(width),
as.numeric(weights),
as.logical(center),
as.integer(min_obs),
as.logical(complete_obs),
as.logical(na_restore),
as.logical(online)
))
}
BHC_data$ROA_sd <- roll_sd(BHC_data$dep_roa1,7)
BHC_data$_roll_roll_sd <- roll_sd(BHC_data$dep_roa1,7)
_roll_roll_sd <- roll_sd(BHC_data$dep_roa1,7)
roll_roll_sd <- roll_sd(BHC_data$dep_roa1,7)
library(dplyr)
library(plm)
BHC_data=read.csv("DiD_data.csv")
roll_sd <- function(x, width, weights = rep(1, width), center = TRUE,
min_obs = width, complete_obs = FALSE, na_restore = FALSE,
online = TRUE) {
return(.Call('roll_roll_sd',
x,
as.integer(width),
as.numeric(weights),
as.logical(center),
as.integer(min_obs),
as.logical(complete_obs),
as.logical(na_restore),
as.logical(online)
))
}
roll_roll_sd <- roll_sd(BHC_data$dep_roa1,7)
??rollapplyr
install.packages(zoo)
install.packages("zoo")
install.packages("zoo")
col_names <- colnames(BHC_data)
formula <- paste(col_names,collapse = '+')
formula
library(zoo)
library(plm)
BHC_data=read.csv("DiD_data.csv")
BHC_data$roll_ROA_sd <- rollapply(BHC_data$dep_roa1,7)
BHC_data$roll_ROA_sd <- rollapply(BHC_data$dep_roa1,7,sd)
BHC_data$roll_ROA_sd <- rollapply(BHC_data$dep_roa1,7,sd,fill=0)
View(BHC_data)
BHC_data$ln_z_score <- log((BHC_data$dep_roa1+BHC_data$dep_leverage)/BHC_data$roll_ROA_sd)
model_Z <- plm(ln_z_score ~ treat_3_b_avg * after_DFA_1 + bhc_avgtradingratio  + dep_lnassets + dep_creditrisk_total3 + dep_cir + dep_depositratio + dep_loans_REratio + dep_liquidity + dep_cpp_bankquarter, data = BHC_data, index = c("rssd9001", "rssd9999"))
BHC_data <- na.omit(BHC_data)
model_Z <- plm(ln_z_score ~ treat_3_b_avg * after_DFA_1 + bhc_avgtradingratio  + dep_lnassets + dep_creditrisk_total3 + dep_cir + dep_depositratio + dep_loans_REratio + dep_liquidity + dep_cpp_bankquarter, data = BHC_data, index = c("rssd9001", "rssd9999"))
View(BHC_data)
library(zoo)
library(plm)
BHC_data=read.csv("DiD_data.csv")
BHC_data$roll_ROA_sd <- rollapply(BHC_data$dep_roa1,7,sd,fill=0)
BHC_data$ln_z_score <- log((BHC_data$dep_roa1+BHC_data$dep_leverage)/BHC_data$roll_ROA_sd)
BHC_data_omit <- na.omit(BHC_data)
View(BHC_data_omit)
BHC_data_omit3 <- BHC_data_omit[-c(1:3),]
View(BHC_data_omit)
View(BHC_data_omit3)
model_Z <- plm(ln_z_score ~ treat_3_b_avg * after_DFA_1 + bhc_avgtradingratio  + dep_lnassets + dep_creditrisk_total3 + dep_cir + dep_depositratio + dep_loans_REratio + dep_liquidity + dep_cpp_bankquarter, data = BHC_data_omit3, index = c("rssd9001", "rssd9999"))
View(BHC_data_omit3)
library(zoo)
library(plm)
BHC_data=read.csv("DiD_data.csv")
BHC_data$roll_ROA_sd <- rollapply(BHC_data$dep_roa1,7,sd,fill=0)
BHC_data$ln_z_score <- log((BHC_data$dep_roa1+BHC_data$dep_leverage)/BHC_data$roll_ROA_sd)
BHC_data[!is.finite(BHC_data)] <- NA
BHC_data_omit <- na.omit(BHC_data)
View(BHC_data_omit)
BHC_data_omit3 <- BHC_data_omit[-c(1:3),]
View(BHC_data_omit3)
model_Z <- plm(ln_z_score ~ treat_3_b_avg * after_DFA_1 + bhc_avgtradingratio  + dep_lnassets + dep_creditrisk_total3 + dep_cir + dep_depositratio + dep_loans_REratio + dep_liquidity + dep_cpp_bankquarter, data = BHC_data_omit3, index = c("rssd9001", "rssd9999"))
plot(BHC_data_omit3$ln_z_score)
plot((BHC_data_omit3$ln_z_score)^e)
plot(exp(BHC_data_omit3$ln_z_score))
plot(BHC_data_omit3$ln_z_score)
index(!is.numeric(BHC_data_omit3$ln_z_score))
library(zoo)
library(plm)
BHC_data=read.csv("DiD_data.csv")
BHC_data$roll_ROA_sd <- rollapply(BHC_data$dep_roa1,7,sd,fill=0)
BHC_data$ln_z_score <- log((BHC_data$dep_roa1+BHC_data$dep_leverage)/BHC_data$roll_ROA_sd)
BHC_data_omit <- na.omit(BHC_data)
BHC_data_omit <- BHC_data_omit[!is.infinite(rowSums(BHC_data_omit)),]
model_Z <- plm(ln_z_score ~ treat_3_b_avg * after_DFA_1 + bhc_avgtradingratio  + dep_lnassets + dep_creditrisk_total3 + dep_cir + dep_depositratio + dep_loans_REratio + dep_liquidity + dep_cpp_bankquarter, data = BHC_data_omit3, index = c("rssd9001", "rssd9999"))
model_Z <- plm(ln_z_score ~ treat_3_b_avg * after_DFA_1 + bhc_avgtradingratio  + dep_lnassets + dep_creditrisk_total3 + dep_cir + dep_depositratio + dep_loans_REratio + dep_liquidity + dep_cpp_bankquarter, data = BHC_data_omit, index = c("rssd9001", "rssd9999"))
summary(model_Z)
student.name <- "LI LIPING"  # put your name here
student.id <- 0320278  # put only the numeric digits of your NUS user id here
load("JamesHarden2014.RData")  # load the data (make sure the .RData file is in your working directory!)
dim(data)  # show data dimensions
summary(data)  # summary
View(data)
model1 <- lm(FINAL_MARGIN~LOCATION,data)
summary(model1)
plot(data$FINAL_MARGIN,data$LOCATION)
plot(data$FINAL_MARGIN,data$LOCATION)
data$LOCATION <- as.numeric(data$LOCATION)
options(width = 120)  # set output width
student.name <- "LI LIPING"  # put your name here
student.id <- 0320278  # put only the numeric digits of your NUS user id here
load("JamesHarden2014.RData")  # load the data (make sure the .RData file is in your working directory!)
dim(data)  # show data dimensions
summary(data)  # summary
data$LOCATION <- dummies(data$LOCATION)
??dummies
library(dummies)
data$LOCATION <- dummies(data$LOCATION)
data$LOCATION <- get.dummies(data$LOCATION)
options(width = 120)  # set output width
student.name <- "LI LIPING"  # put your name here
student.id <- 0320278  # put only the numeric digits of your NUS user id here
load("JamesHarden2014.RData")  # load the data (make sure the .RData file is in your working directory!)
dim(data)  # show data dimensions
summary(data)  # summary
data$dummy_LOCATION <- NULL
data$dummy_LOCATION[data$LOCATION == "H"] = 0
data$dummy_LOCATION[data$LOCATION == "A"] = 1
model1a <- lm(FINAL_MARGIN~dummy_LOCATION,data)
summary(model1a)
plot(data$FINAL_MARGIN,data$LOCATION)
library("dplyr")
data.game <- data %>% group_by(GAME_ID) %>% select(c("GAME_ID", "FINAL_MARGIN", "LOCATION")) %>% distinct()
summary(data.game)
View(data.game)
data.game$dummy_LOCATION <- NULL
data.game$dummy_LOCATION[data.game$LOCATION == "H"] = 0
data.game$dummy_LOCATION[data.game$LOCATION == "A"] = 1
model1b <- lm(FINAL_MARGIN~dummy_LOCATION,data.game)
summary(model1a)
plot(data$FINAL_MARGIN,data$LOCATION)
View(data.game)
options(width = 120)  # set output width
student.name <- "LI LIPING"  # put your name here
student.id <- 0320278  # put only the numeric digits of your NUS user id here
load("JamesHarden2014.RData")  # load the data (make sure the .RData file is in your working directory!)
dim(data)  # show data dimensions
summary(data)  # summary
data$dummy_LOCATION[data$LOCATION == "H"] = 0
data$dummy_LOCATION[data$LOCATION == "A"] = 1
model1a <- lm(FINAL_MARGIN~dummy_LOCATION,data)
summary(model1a)
plot(data$FINAL_MARGIN,data$LOCATION)
View(data)
library("dplyr")
data.game <- data %>% group_by(GAME_ID) %>% select(c("GAME_ID", "FINAL_MARGIN", "LOCATION")) %>% distinct()
summary(data.game)
data.game$dummy_LOCATION[data.game$LOCATION == "H"] = 0
data.game$dummy_LOCATION[data.game$LOCATION == "A"] = 1
model1b <- lm(FINAL_MARGIN~dummy_LOCATION,data.game)
summary(model1a)
plot(data$FINAL_MARGIN,data$LOCATION)
View(data.game)
library("ggplot2")
p3 <- ggplot(data=data) + geom_point(aes(x=LOC_X, y=LOC_Y, color=factor(SHOT_TYPE))) + ylim(c(0,300)) + theme_bw()
p3
model2a <- glm(SHOT_TYPE~ploy(LOC_X,2,raw = TRUE)+poly(LOC_Y,2,raw = TRUE),family = "binomial")
View(data)
model2a <- glm(SHOT_TYPE~ ploy(LOC_X,2,raw = TRUE)+poly(LOC_Y,2,raw = TRUE),family = "binomial",data)
model2a <- glm(SHOT_TYPE~ poly(LOC_X,2,raw = TRUE)+poly(LOC_Y,2,raw = TRUE),family = "binomial",data)
summary(model2a)
data.grid <- expand.grid(LOC_X=seq(-250, 250), LOC_Y=seq(0, 300))
pred_2a <- predict(model2a,data.grid,type = 'response')
p3+stat_contour(data=data.grid, aes(x=LOC_X, y=LOC_Y, z=pred_za), breaks=c(0.5))
data.grid <- expand.grid(LOC_X=seq(-250, 250), LOC_Y=seq(0, 300))
pred_2a <- predict(model2a,data.grid,type = 'response')
p3+stat_contour(data=data.grid, aes(x=LOC_X, y=LOC_Y, z=pred_2a), breaks=c(0.5))
## split 3pt and 2pt
data2 <- subset(data, SHOT_TYPE=="2PT Field Goal")
ggplot(data=data2) + geom_point(aes(x=LOC_X, y=LOC_Y, color=factor(SHOT_RESULT))) + theme_bw()
model3a <- glm(formula=SHOT_RESULT ~ CLOSE_DEF_DIST + SHOT_DISTANCE,data=data2 family ='poisson')
model3a <- glm(formula=SHOT_RESULT ~ CLOSE_DEF_DIST + SHOT_DISTANCE,data=data2, family ="poisson")
View(data2)
model3a <- glm(formula=SHOT_RESULT ~ CLOSE_DEF_DIST + SHOT_DISTANCE,data=data2, family ="binomial")
summary(model3a)
table(data2$ACTION_TYPE)
levels.old <- levels(data2$ACTION_TYPE)
levels.new <- ifelse(table(data2$ACTION_TYPE) > 50, levels.old, "others")
data2$ACTION_TYPE2 <- data2$ACTION_TYPE
levels(data2$ACTION_TYPE2) <- levels.new
table(data2$ACTION_TYPE2)
data2$ACTION_TYPE <- NULL
View(data2)
col_names <- colnames(data2)
formula <- paste(col_names,collapse = '+')
formula
model3b <- glm(SHOT_RESULT~SHOT_NUMBER+MINUTES_REMAINING+SECONDS_REMAINING+SHOT_TYPE+SHOT_ZONE_AREA+SHOT_ZONE_RANGE+SHOT_DISTANCE+LOC_X+LOC_Y+LOCATION+W+FINAL_MARGIN+GAME_CLOCK+SHOT_CLOCK+DRIBBLES+TOUCH_TIME+SHOT_RESULT++CLOSE_DEF_DIST+PTS+ACTION_TYPE2,data2,family = "binomial")
options(width = 120)  # set output width
student.name <- "LI LIPING"  # put your name here
student.id <- 0320278  # put only the numeric digits of your NUS user id here
load("JamesHarden2014.RData")  # load the data (make sure the .RData file is in your working directory!)
dim(data)  # show data dimensions
summary(data)  # summary
model1a <- lm(FINAL_MARGIN~LOCATION,data)
summary(model1a)
library("dplyr")
data.game <- data %>% group_by(GAME_ID) %>% select(c("GAME_ID", "FINAL_MARGIN", "LOCATION")) %>% distinct()
summary(data.game)
model1b <- lm(FINAL_MARGIN~LOCATION,data.game)
summary(model1b)
library("ggplot2")
p3 <- ggplot(data=data) + geom_point(aes(x=LOC_X, y=LOC_Y, color=factor(SHOT_TYPE))) + ylim(c(0,300)) + theme_bw()
p3
model2a <- glm(SHOT_TYPE~ poly(LOC_X,2,raw = TRUE)+poly(LOC_Y,2,raw = TRUE),family = "binomial",data)
summary(model2a)
data.grid <- expand.grid(LOC_X=seq(-250, 250), LOC_Y=seq(0, 300))
#Make predictions on the new data
pred_2a <- predict(model2a,data.grid,type = 'response')
#plot the boundary on the previous plot
p3+stat_contour(data=data.grid, aes(x=LOC_X, y=LOC_Y, z=pred_2a), breaks=c(0.5))
## split 3pt and 2pt
data2 <- subset(data, SHOT_TYPE=="2PT Field Goal")
ggplot(data=data2) + geom_point(aes(x=LOC_X, y=LOC_Y, color=factor(SHOT_RESULT))) + theme_bw()
model3a <- glm(formula=SHOT_RESULT ~ CLOSE_DEF_DIST + SHOT_DISTANCE,data=data2, family ="binomial")
summary(model3a)
table(data2$ACTION_TYPE)
levels.old <- levels(data2$ACTION_TYPE)
levels.new <- ifelse(table(data2$ACTION_TYPE) > 50, levels.old, "others")
data2$ACTION_TYPE2 <- data2$ACTION_TYPE
levels(data2$ACTION_TYPE2) <- levels.new
table(data2$ACTION_TYPE2)
data2$ACTION_TYPE <- NULL
data3 <- subset(data2, select=c(-PLAYER_ID, -PLAYER_NAME, -TEAM_ID, -TEAM_NAME, -CLOSEST_DEFENDER,-SHOT_TYPE,-MATCHUP,-PTS))
model3b <- glm(SHOT_RESULT ~., data3, family="binomial")
summary(model3b)
library("MASS")
model3c <- stepAIC(model3b, direction="backward")
summary(model3c)
library("glmnetUtils")
# CV for optimal lambda
set.seed(456)
model3d <- cv.glmnet(SHOT_RESULT ~., data3, family="binomial",alpha=1, use.model.frame=TRUE)
summary(model3d_cv)
coef(model3d,model3d_cv$lambda.min)
coef(model3d,model3d$lambda.min)
pred3d <- predict(model3d, s=model3d$lambda.min, newdata=data2,type="response")
pred.3d <- prediction(pred3d,data3$SHOT_RESULT)
library(dplyr)
pred3b <- predict(model3b,newdata=data2,type="response")
pred3c <- predict(model3c,newdata=data2,type="response")
pred3d <- predict(model3d, s=model3d$lambda.min, newdata=data2,type="response")
library(ROCR)
pred.3b <- prediction(pred3b,data3$SHOT_RESULT)
pred.3c <- prediction(pred3c,data3$SHOT_RESULT)
pred.3d <- prediction(pred3d,data3$SHOT_RESULT)
#roc
roc_3b <- performance(pred.3b,"tpr","fpr")
roc_3c <- performance(pred.3c,"tpr","fpr")
roc_3d <- performance(pred.3d,"tpr","fpr")
#plot roc
plot(roc_3b,col="black")
plot(roc_3c,col="green",add=TRUE)
plot(roc_3d,col="red",add=TRUE)
legend(x=0.8,y=0.3,legend = c("roc_3b","roc_3c","roc_3d"),lty = c(1,1,1),lwd = c(1,1,1),col = c("black","green","red"),cex=0.8)
#auc
performance(pred.3b,"auc")@y.values[[1]]
performance(pred.3c,"auc")@y.values[[1]]
performance(pred.3d,"auc")@y.values[[1]]
options(width = 120)  # set output width
student.name <- "LI LIPING"  # put your name here
student.id <- 0320278  # put only the numeric digits of your NUS user id here
load("JamesHarden2014.RData")  # load the data (make sure the .RData file is in your working directory!)
dim(data)  # show data dimensions
summary(data)  # summary
model1a <- lm(FINAL_MARGIN~LOCATION,data)
summary(model1a)
library("dplyr")
data.game <- data %>% group_by(GAME_ID) %>% select(c("GAME_ID", "FINAL_MARGIN", "LOCATION")) %>% distinct()
options(width = 120)  # set output width
student.name <- "LI LIPING"  # put your name here
student.id <- 0320278  # put only the numeric digits of your NUS user id here
load("JamesHarden2014.RData")  # load the data (make sure the .RData file is in your working directory!)
dim(data)  # show data dimensions
summary(data)  # summary
model1a <- lm(FINAL_MARGIN~LOCATION,data)
summary(model1a)
library("dplyr")
data.game <- data %>% group_by(GAME_ID) %>% select(c("GAME_ID", "FINAL_MARGIN", "LOCATION")) %>% distinct()
summary(data.game)
model1b <- lm(FINAL_MARGIN~LOCATION,data.game)
summary(model1b)
library("ggplot2")
p3 <- ggplot(data=data) + geom_point(aes(x=LOC_X, y=LOC_Y, color=factor(SHOT_TYPE))) + ylim(c(0,300)) + theme_bw()
p3
model2a <- glm(SHOT_TYPE~ poly(LOC_X,2,raw = TRUE)+poly(LOC_Y,2,raw = TRUE),family = "binomial",data)
summary(model2a)
data.grid <- expand.grid(LOC_X=seq(-250, 250), LOC_Y=seq(0, 300))
#Make predictions on the new data
pred_2a <- predict(model2a,data.grid,type = 'response')
#plot the boundary on the previous plot
p3+stat_contour(data=data.grid, aes(x=LOC_X, y=LOC_Y, z=pred_2a), breaks=c(0.5))
## split 3pt and 2pt
data2 <- subset(data, SHOT_TYPE=="2PT Field Goal")
ggplot(data=data2) + geom_point(aes(x=LOC_X, y=LOC_Y, color=factor(SHOT_RESULT))) + theme_bw()
model3a <- glm(formula=SHOT_RESULT ~ CLOSE_DEF_DIST + SHOT_DISTANCE,data=data2, family ="binomial")
summary(model3a)
table(data2$ACTION_TYPE)
levels.old <- levels(data2$ACTION_TYPE)
levels.new <- ifelse(table(data2$ACTION_TYPE) > 50, levels.old, "others")
data2$ACTION_TYPE2 <- data2$ACTION_TYPE
levels(data2$ACTION_TYPE2) <- levels.new
table(data2$ACTION_TYPE2)
data2$ACTION_TYPE <- NULL
data3 <- subset(data2, select=c(-PLAYER_ID, -PLAYER_NAME, -TEAM_ID, -TEAM_NAME, -CLOSEST_DEFENDER,-SHOT_TYPE,-MATCHUP,-PTS))
model3b <- glm(SHOT_RESULT ~., data3, family="binomial")
summary(model3b)
library("MASS")
model3c <- stepAIC(model3b, direction="backward")
summary(model3c)
library("glmnetUtils")
# CV for optimal lambda
set.seed(456)
model3d <- cv.glmnet(SHOT_RESULT ~., data3, family="binomial",alpha=1, use.model.frame=TRUE)
# final model
coef(model3d,model3d$lambda.min)
View(data2)
View(data3)
data3 <- subset(data2, select=c(-GAME_ID,-FINAL_MARGIN,-PLAYER_ID, -PLAYER_NAME, -TEAM_ID, -TEAM_NAME, -CLOSEST_DEFENDER,-SHOT_TYPE,-MATCHUP,-PTS))
model3b <- glm(SHOT_RESULT ~., data3, family="binomial")
summary(model3b)
library("MASS")
model3c <- stepAIC(model3b, direction="backward")
summary(model3c)
View(data2)
View(data3)
options(width = 120)  # set output width
student.name <- "LI LIPING"  # put your name here
student.id <- 0320278  # put only the numeric digits of your NUS user id here
load("JamesHarden2014.RData")  # load the data (make sure the .RData file is in your working directory!)
dim(data)  # show data dimensions
summary(data)  # summary
model1a <- lm(FINAL_MARGIN~LOCATION,data)
summary(model1a)
library("dplyr")
data.game <- data %>% group_by(GAME_ID) %>% select(c("GAME_ID", "FINAL_MARGIN", "LOCATION")) %>% distinct()
options(width = 120)  # set output width
student.name <- "LI LIPING"  # put your name here
student.id <- 0320278  # put only the numeric digits of your NUS user id here
load("JamesHarden2014.RData")  # load the data (make sure the .RData file is in your working directory!)
dim(data)  # show data dimensions
summary(data)  # summary
model1a <- lm(FINAL_MARGIN~LOCATION,data)
summary(model1a)
library("dplyr")
data.game <- data %>% group_by(GAME_ID) %>% select(c("GAME_ID", "FINAL_MARGIN", "LOCATION")) %>% distinct()
summary(data.game)
model1b <- lm(FINAL_MARGIN~LOCATION,data.game)
summary(model1b)
library("ggplot2")
p3 <- ggplot(data=data) + geom_point(aes(x=LOC_X, y=LOC_Y, color=factor(SHOT_TYPE))) + ylim(c(0,300)) + theme_bw()
p3
model2a <- glm(SHOT_TYPE~ poly(LOC_X,2,raw = TRUE)+poly(LOC_Y,2,raw = TRUE),family = "binomial",data)
summary(model2a)
data.grid <- expand.grid(LOC_X=seq(-250, 250), LOC_Y=seq(0, 300))
#Make predictions on the new data
pred_2a <- predict(model2a,data.grid,type = 'response')
#plot the boundary on the previous plot
p3+stat_contour(data=data.grid, aes(x=LOC_X, y=LOC_Y, z=pred_2a), breaks=c(0.5))
## split 3pt and 2pt
data2 <- subset(data, SHOT_TYPE=="2PT Field Goal")
ggplot(data=data2) + geom_point(aes(x=LOC_X, y=LOC_Y, color=factor(SHOT_RESULT))) + theme_bw()
model3a <- glm(formula=SHOT_RESULT ~ CLOSE_DEF_DIST + SHOT_DISTANCE,data=data2, family ="binomial")
summary(model3a)
table(data2$ACTION_TYPE)
levels.old <- levels(data2$ACTION_TYPE)
levels.new <- ifelse(table(data2$ACTION_TYPE) > 50, levels.old, "others")
data2$ACTION_TYPE2 <- data2$ACTION_TYPE
levels(data2$ACTION_TYPE2) <- levels.new
table(data2$ACTION_TYPE2)
data2$ACTION_TYPE <- NULL
data3 <- subset(data2, select=c(-PLAYER_ID, -PLAYER_NAME, -TEAM_ID, -TEAM_NAME, -CLOSEST_DEFENDER,-SHOT_TYPE,-MATCHUP,-FINAL_MARGIN,-PTS))
model3b <- glm(SHOT_RESULT ~., data3, family="binomial")
summary(model3b)
library("MASS")
model3c <- stepAIC(model3b, direction="backward")
View(data)
View(data)
View(data)
summary(model3c)
library("glmnetUtils")
# CV for optimal lambda
set.seed(456)
model3d <- cv.glmnet(SHOT_RESULT ~., data3, family="binomial",alpha=1, use.model.frame=TRUE)
# final model
coef(model3d,model3d$lambda.min)
